---
import Layout from '../../../layouts/Layout.astro';
---

<Layout title="Representación numérica - IIC-1001">
	<h1>Representación numérica</h1>
	<p class="date">Publicado el 20 de mayo, 2023</p>
	<article>
		<h2>Motivación</h2>
		<p>La representación numérica es algo esencial en esta carrera. Aprender estos conceptos les proporcionará las bases para el resto de la carrera y también, si les gusta la computación, is a shit ton of fun.</p>

		<h2>Bases numéricas</h2>
		<p>La base numérica que siempre hemos conocido ha sido la base 10, es super intuitiva ya que tenemos diez dedos. Una vez llegas al 9 añades una unidad a las decenas y repites el ciclo, una vez llegas al 9 en las centenas agregas una unidad a las centenas y así podemos contar infinitamente. Esta es como materia de tercero básico, es muy probable que te hayan enseñado esto con bloques. Aviso en seguida que al final de este archivo para los más mathematics está la fórmula de bases numéricas con su demostración que creo que también les sirve para intro al álgebra.</p>

		<h3>Base 2</h3>
		<p>La base 2 es el binario. En vez de contar hasta el 9 y después añadir una unidad a las decenas, solo podemos contar del 0 al 1 y cuando llegamos al 1 añadimos un valor a las "decenas" pero ya no son decenas, ahora cada "slot" vale potencias de 2. Entonces el primer "slot" vale 2⁰, el segundo "slot" vale 2¹, el tercero 2² y así sucesivamente 2^n para n ∈ ℕ. Así por ejemplo, si queremos representar el número 5 escribimos 101 ya que 1 × 2⁰ + 0 × 2¹ + 1 × 2² = 1 + 0 + 4 = 5. Perfecto, ahora podemos representar todos los números naturales de forma binaria pero... ¿qué pasa si queremos representar un número negativo, entero?</p>

		<div class="interactive-example">
			<h4>Ejemplo interactivo: Conversión decimal a binario</h4>
			<p>Ingresa un número decimal para ver su representación binaria:</p>
			<input type="number" id="decimal-input" min="0" max="255">
			<button id="convert-btn">Convertir</button>
			<p>Resultado: <span id="binary-result"></span></p>
		</div>

		<h4>Complemento de 1</h4>
		<p>Para obtener el complemento de 1, es necesario que el bit más significativo (el bit más a la izquierda) sea 0, en caso de no haber uno, se debe agregar. Luego para representar el negativo se deben invertir cada uno de los bits del número. Esta representación no es perfecta, podemos ver un ejemplo 5 + (-5) = ¿15?.</p>

		<h4>Complemento de 2</h4>
		<p>Es la forma más robusta que tenemos de representar un número en binario y es exactamente igual a la anterior pero al final sumamos un 1. Ahora si vemos el ejemplo 5 + (-5) = 0, como vemos sobra un bit pero se debe a que estamos en complemento de 2, la operación es igual a 0.</p>

		<h3>Hexadecimal</h3>
		<p>La famosa base 16, es lo mismo pero en las unidades, decenas, centenas, etc. Podemos sumar hasta 16. Si lo intentamos nos vamos a dar cuenta de que 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 y ¿Ahora qué? ¿Cómo podemos seguir contando sobre las unidades? Lo que se hace es contar con letras, entonces ..., 8, 9, A, B, C, D, E, F. Y en esta base el 1 en las decenas vale 16 y en las centenas 256, son potencias de 16. Las unidades 16⁰, las decenas 16¹, las centenas 16² y así hasta el infinito.</p>

		<div class="note">
			<p><strong>Nota:</strong> Faltan más detalles sobre hexadecimal y ejemplos de ejercicios que podrían aparecer en la prueba.</p>
		</div>

		<h3>Tabla ASCII</h3>
		<p><em>Contenido en desarrollo</em></p>

		<div class="note">
			<p><strong>Nota del autor:</strong> Tengo que añadir ejercicios y más información sobre la tabla ASCII.</p>
		</div>
	</article>
</Layout>

<script>
	document.getElementById('convert-btn').addEventListener('click', function() {
		const decimalInput = document.getElementById('decimal-input');
		const binaryResult = document.getElementById('binary-result');
		const decimal = parseInt(decimalInput.value);
		if (isNaN(decimal) || decimal < 0 || decimal > 255) {
			binaryResult.textContent = 'Por favor, ingresa un número entre 0 y 255.';
		} else {
			binaryResult.textContent = decimal.toString(2).padStart(8, '0');
		}
	});
</script>

<style>
	h1, h2, h3, h4 {
		color: rgb(var(--accent));
	}
	.date {
		color: rgba(var(--text), 0.7);
		font-style: italic;
		margin-bottom: 1rem;
	}
	article {
		line-height: 1.6;
	}
	.note {
		background-color: rgba(var(--accent-light), 0.2);
		border-left: 4px solid rgb(var(--accent));
		padding: 1rem;
		margin: 1rem 0;
	}
	.interactive-example {
		background-color: rgba(var(--accent-light), 0.1);
		border: 1px solid rgba(var(--accent), 0.3);
		border-radius: 8px;
		padding: 1rem;
		margin: 1rem 0;
	}
	input, button {
		margin-top: 0.5rem;
		padding: 0.5rem;
		border: 1px solid rgba(var(--text), 0.3);
		border-radius: 4px;
	}
	button {
		background-color: rgb(var(--accent));
		color: rgb(var(--background));
		cursor: pointer;
		transition: background-color 0.3s ease;
	}
	button:hover {
		background-color: rgb(var(--accent-dark));
	}
</style>
